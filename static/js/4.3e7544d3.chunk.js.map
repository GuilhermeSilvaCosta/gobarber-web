{"version":3,"sources":["pages/Dashboard/styles.js","pages/Dashboard/index.js"],"names":["Container","styled","div","Time","li","props","past","available","range","Dashboard","useState","schedule","setSchedule","Date","date","setDate","dateFormatted","useMemo","format","locale","pt","useEffect","a","api","get","params","response","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","setMilliseconds","setSeconds","setMinutes","setHours","compareDate","utcToZonedTime","time","isBefore","appointment","find","isEqual","parseISO","loadSchedule","type","onClick","subDays","size","color","addDays","key","user","name"],"mappings":"szCAEO,IAAMA,EAAYC,IAAOC,IAAV,KAgCTC,EAAOF,IAAOG,GAAV,KAKF,SAAAC,GAAK,OAAKA,EAAMC,KAAO,GAAM,KAI3B,SAAAD,GAAK,OAAKA,EAAME,UAAY,OAAS,aAQrC,SAAAF,GAAK,OAAKA,EAAME,UAAY,OAAS,U,wCCvCtD,IAAMC,EAAQ,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAE9C,SAASC,IAAa,IAAD,EACAC,mBAAS,IADT,mBACzBC,EADyB,KACfC,EADe,OAERF,mBAAS,IAAIG,MAFL,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAI1BC,EAAgBC,mBAClB,kBAAMC,YAAOJ,EAAM,cAAe,CAAEK,OAAQC,QAC5C,CAACN,IAsCL,OAnCAO,qBAAU,WAAM,4CACZ,gCAAAC,EAAA,sEAC2BC,IAAIC,IAAI,YAAa,CACxCC,OAAQ,CAAEX,UAFlB,OACUY,EADV,OAKUC,EAAWC,KAAKC,iBAAiBC,kBAAkBC,SAEnDC,EAAOxB,EAAMyB,KAAI,SAAAC,GACnB,IAAMC,EAAYC,YACdC,YAAWC,YAAWC,YAASzB,EAAMoB,GAAO,GAAI,GAAI,GAElDM,EAAcC,YAAeN,EAAWR,GAE9C,MAAO,CACHe,KAAK,GAAD,OAAKR,EAAL,OACJ5B,KAAMqC,YAASR,EAAW,IAAItB,MAC9B+B,YAAalB,EAASM,KAAKa,MAAK,SAAAvB,GAAC,OAAIwB,YAAQC,YAASzB,EAAER,MAAO0B,UAIvE5B,EAAYoB,GApBhB,4CADY,uBAAC,WAAD,wBAwBZgB,KACD,CAAClC,IAWA,kBAACd,EAAD,KACI,gCACI,4BAAQiD,KAAK,SAASC,QAXlC,WACInC,EAAQoC,YAAQrC,EAAM,MAWV,kBAAC,IAAD,CAAesC,KAAM,GAAIC,MAAM,UAEnC,gCAASrC,GACT,4BAAQiC,KAAK,SAASC,QAXlC,WACInC,EAAQuC,YAAQxC,EAAM,MAWV,kBAAC,IAAD,CAAgBsC,KAAM,GAAIC,MAAM,WAIxC,4BACM1C,EAASsB,KAAI,SAAAS,GAAI,OACf,kBAACvC,EAAD,CAAMoD,IAAKb,EAAKA,KAAMpC,KAAMoC,EAAKpC,KAAMC,WAAYmC,EAAKE,aACpD,gCAASF,EAAKA,MACd,8BAAOA,EAAKE,YAAcF,EAAKE,YAAYY,KAAKC,KAAO","file":"static/js/4.3e7544d3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    max-width: 600px;\n    margin: 50px auto;\n\n    display: flex;\n    flex-direction: column;\n\n    header {\n        display: flex;\n        align-self: center;\n        align-items: center;\n\n        button {\n            border: 0;\n            background: none;\n        }\n\n        strong {\n            color: #fff;\n            font-size: 24px;\n            margin: 0 15px;\n        }\n    }\n\n    ul {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        grid-gap: 15px;\n        margin-top: 30px;\n    }\n`;\n\nexport const Time = styled.li`\n    padding: 20px;\n    border-radius: 4px;\n    background: #fff;\n\n    opacity: ${props => (props.past ? 0.6 : 1)};\n\n    strong {\n        display: block;\n        color: ${props => (props.available ? '#999' : '#7159c1')};\n        font-size: 20px;\n        font-weight: normal;\n    }\n\n    span {\n        display: block;\n        margin-top: 3px;\n        color: ${props => (props.available ? '#999' : '#666')};\n    }\n\n    span {\n\n    }\n`;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport {\n    format, subDays, addDays, setHours, setMinutes, setSeconds,\n    isBefore, isEqual, parseISO, setMilliseconds,\n} from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport api from 'services/api';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n    const [schedule, setSchedule] = useState([]);\n    const [date, setDate] = useState(new Date());\n\n    const dateFormatted = useMemo(\n        () => format(date, \"d 'de' MMMM\", { locale: pt }),\n        [date],\n    );\n\n    useEffect(() => {\n        async function loadSchedule() {\n            const response = await api.get('schedules', {\n                params: { date },\n            });\n\n            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n            const data = range.map(hour => {\n                const checkDate = setMilliseconds(\n                    setSeconds(setMinutes(setHours(date, hour), 0), 0), 0,\n                );\n                const compareDate = utcToZonedTime(checkDate, timezone);\n\n                return {\n                    time: `${hour}:00`,\n                    past: isBefore(checkDate, new Date()),\n                    appointment: response.data.find(a => isEqual(parseISO(a.date), compareDate)),\n                };\n            });\n\n            setSchedule(data);\n        }\n\n        loadSchedule();\n    }, [date]);\n\n    function handlePrevDay() {\n        setDate(subDays(date, 1));\n    }\n\n    function handleNextDay() {\n        setDate(addDays(date, 1));\n    }\n\n    return (\n        <Container>\n            <header>\n                <button type=\"button\" onClick={handlePrevDay}>\n                    <MdChevronLeft size={36} color=\"#FFF\" />\n                </button>\n                <strong>{dateFormatted}</strong>\n                <button type=\"button\" onClick={handleNextDay}>\n                    <MdChevronRight size={36} color=\"#FFF\" />\n                </button>\n            </header>\n\n            <ul>\n                { schedule.map(time => (\n                    <Time key={time.time} past={time.past} available={!time.appointment}>\n                        <strong>{time.time}</strong>\n                        <span>{time.appointment ? time.appointment.user.name : 'Em aberto'}</span>\n                    </Time>\n                ))}\n            </ul>\n        </Container>\n    );\n}\n"],"sourceRoot":""}